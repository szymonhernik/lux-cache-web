create type "public"."app_role" as enum ('admin', 'moderator');

revoke delete on table "public"."prices" from "anon";

revoke insert on table "public"."prices" from "anon";

revoke references on table "public"."prices" from "anon";

revoke select on table "public"."prices" from "anon";

revoke trigger on table "public"."prices" from "anon";

revoke truncate on table "public"."prices" from "anon";

revoke update on table "public"."prices" from "anon";

revoke delete on table "public"."prices" from "authenticated";

revoke insert on table "public"."prices" from "authenticated";

revoke references on table "public"."prices" from "authenticated";

revoke select on table "public"."prices" from "authenticated";

revoke trigger on table "public"."prices" from "authenticated";

revoke truncate on table "public"."prices" from "authenticated";

revoke update on table "public"."prices" from "authenticated";

revoke delete on table "public"."products" from "anon";

revoke insert on table "public"."products" from "anon";

revoke references on table "public"."products" from "anon";

revoke select on table "public"."products" from "anon";

revoke trigger on table "public"."products" from "anon";

revoke truncate on table "public"."products" from "anon";

revoke update on table "public"."products" from "anon";

revoke delete on table "public"."products" from "authenticated";

revoke insert on table "public"."products" from "authenticated";

revoke references on table "public"."products" from "authenticated";

revoke select on table "public"."products" from "authenticated";

revoke trigger on table "public"."products" from "authenticated";

revoke truncate on table "public"."products" from "authenticated";

revoke update on table "public"."products" from "authenticated";

revoke delete on table "public"."subscriptions" from "anon";

revoke insert on table "public"."subscriptions" from "anon";

revoke references on table "public"."subscriptions" from "anon";

revoke select on table "public"."subscriptions" from "anon";

revoke trigger on table "public"."subscriptions" from "anon";

revoke truncate on table "public"."subscriptions" from "anon";

revoke update on table "public"."subscriptions" from "anon";

revoke delete on table "public"."subscriptions" from "authenticated";

revoke insert on table "public"."subscriptions" from "authenticated";

revoke references on table "public"."subscriptions" from "authenticated";

revoke select on table "public"."subscriptions" from "authenticated";

revoke trigger on table "public"."subscriptions" from "authenticated";

revoke truncate on table "public"."subscriptions" from "authenticated";

revoke update on table "public"."subscriptions" from "authenticated";

create table "public"."user_roles" (
    "id" bigint generated by default as identity not null,
    "role" app_role not null,
    "user_id" uuid default gen_random_uuid()
);


alter table "public"."user_roles" enable row level security;

alter table "public"."users" add column "can_trial" boolean not null;

CREATE UNIQUE INDEX user_roles_pkey ON public.user_roles USING btree (id);

alter table "public"."user_roles" add constraint "user_roles_pkey" PRIMARY KEY using index "user_roles_pkey";

alter table "public"."user_roles" add constraint "user_roles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE not valid;

alter table "public"."user_roles" validate constraint "user_roles_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.custom_access_token_hook_test_six(event jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 STABLE
AS $function$
  declare
    claims jsonb;
    user_role public.app_role;
    subscription_price_id text;
    product_name text;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    -- Get the subscription price id for the current user
    select price_id into subscription_price_id from public.subscriptions where user_id = (event->>'user_id')::uuid;

     -- Get the product name for the subscription price
    select name into product_name from public.products where id = (select product_id from public.prices where id = subscription_price_id);


    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    if subscription_price_id is not null then
      -- Set the subscription price id claim
      claims := jsonb_set(claims, '{subscription_price_id}', to_jsonb(subscription_price_id));
    else
      claims := jsonb_set(claims, '{subscription_price_id}', 'null');
    end if;

    if product_name is not null then
      -- Set the product name claim
      claims := jsonb_set(claims, '{product_name}', to_jsonb(product_name));
    else
      claims := jsonb_set(claims, '{product_name}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$function$
;

CREATE OR REPLACE FUNCTION public.custom_access_tokens_hook(event jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 STABLE
AS $function$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.users (id, full_name, avatar_url, can_trial)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', TRUE);
  return new;
end;$function$
;

grant delete on table "public"."prices" to "supabase_auth_admin";

grant insert on table "public"."prices" to "supabase_auth_admin";

grant references on table "public"."prices" to "supabase_auth_admin";

grant select on table "public"."prices" to "supabase_auth_admin";

grant trigger on table "public"."prices" to "supabase_auth_admin";

grant truncate on table "public"."prices" to "supabase_auth_admin";

grant update on table "public"."prices" to "supabase_auth_admin";

grant delete on table "public"."products" to "supabase_auth_admin";

grant insert on table "public"."products" to "supabase_auth_admin";

grant references on table "public"."products" to "supabase_auth_admin";

grant select on table "public"."products" to "supabase_auth_admin";

grant trigger on table "public"."products" to "supabase_auth_admin";

grant truncate on table "public"."products" to "supabase_auth_admin";

grant update on table "public"."products" to "supabase_auth_admin";

grant delete on table "public"."subscriptions" to "supabase_auth_admin";

grant insert on table "public"."subscriptions" to "supabase_auth_admin";

grant references on table "public"."subscriptions" to "supabase_auth_admin";

grant select on table "public"."subscriptions" to "supabase_auth_admin";

grant trigger on table "public"."subscriptions" to "supabase_auth_admin";

grant truncate on table "public"."subscriptions" to "supabase_auth_admin";

grant update on table "public"."subscriptions" to "supabase_auth_admin";

grant delete on table "public"."user_roles" to "service_role";

grant insert on table "public"."user_roles" to "service_role";

grant references on table "public"."user_roles" to "service_role";

grant select on table "public"."user_roles" to "service_role";

grant trigger on table "public"."user_roles" to "service_role";

grant truncate on table "public"."user_roles" to "service_role";

grant update on table "public"."user_roles" to "service_role";

grant delete on table "public"."user_roles" to "supabase_auth_admin";

grant insert on table "public"."user_roles" to "supabase_auth_admin";

grant references on table "public"."user_roles" to "supabase_auth_admin";

grant select on table "public"."user_roles" to "supabase_auth_admin";

grant trigger on table "public"."user_roles" to "supabase_auth_admin";

grant truncate on table "public"."user_roles" to "supabase_auth_admin";

grant update on table "public"."user_roles" to "supabase_auth_admin";

create policy "Allow auth admin to read prices table"
on "public"."prices"
as permissive
for select
to supabase_auth_admin
using (true);


create policy "Allow auth admin to read products name "
on "public"."products"
as permissive
for select
to supabase_auth_admin
using (true);


create policy "Allow auth admin to read subscriptions info "
on "public"."subscriptions"
as permissive
for select
to supabase_auth_admin
using (true);


create policy "Allow auth admin to read user roles"
on "public"."user_roles"
as permissive
for select
to supabase_auth_admin
using (true);



